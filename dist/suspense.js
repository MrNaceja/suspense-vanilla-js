(()=>{"use strict";const e=(e,n,t=!1)=>{if(Array.isArray(e)||(e=[e]),e=e.map((e=>Object(e))),t){const t=n.shift();return e.every((e=>e instanceof t))}return e.some((e=>n.some((n=>e instanceof n))))};window.Suspense=n=>{let{container:t,fallback:r,lazyElement:s,replace:o=!1,onSuspensionStart:a,onSuspensionEnd:i,target:l}=n;if(!e(s,[Promise,Function]))throw new TypeError("lazyElement should be promise return element(s) or async function returning element(s).");return t||(t=document.createElement("slot")),a&&a(),t.classList.add("suspense"),t.replaceChildren([]),t.append(r),l&&!l.contains(t)&&l.append(t),s instanceof Function&&(s=s()),s.then((n=>{if(!e(n,[Element,Node],!0))throw new TypeError("lazyElement should return DOM Elements (Element or Node).");n instanceof Array||(n=[n]),r.replaceWith(...n),o&&t.replaceWith(...t.childNodes),t.classList.remove("suspense"),i&&i()})),t}})();